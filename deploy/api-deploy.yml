# create namespace
apiVersion: v1
kind: Namespace
metadata:
  name: scratchpad
  labels:
    name: mucking-abaat
    env: env-scratchpad

---

# ConfigMap
# Let's load up our appsettings.prod.json via k8s configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-app-settings
  namespace: scratchpad
data:
  appsettings.Production.json: |
    {
      "Logging": {
        "LogLevel": {
          "Default": "None",
          "Microsoft.AspNetCore": "None",
          "EchoIp": "Information"
        }
      }
    }  

---

# Secrets (remember has to be base64 encoded)
# Lets load up our db connectionn string via k8s secret
apiVersion: v1
kind: Secret
metadata:
  name: api-app-secrets
  namespace: scratchpad
type: Opaque
stringData: #unencoded base64
  db-connection-string: "should.be.k8s.db.sevice.uri"
#^^ only use stingData for testing, in real0worlld
# use data: and have value be bas364 enccoded

---

# Deployment
# Let's define a deployment of a webapi pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: scratchpad
  labels:
    app: api
spec:
  replicas: 5
  selector:
    matchLabels:
      app: api
  template: #POD template begins here
    metadata:
      name: api-pod
      namespace: scratchpad
      labels:
        app: api
    spec:
      containers:
        - name: api-echo-ip
          image: delagettodh/echo-ip:latest
          ports:
            - containerPort: 5000
          volumeMounts:
          - name: appsettings-cfg
            mountPath: /app/appsettings.Production.json
            subPath: appsettings.Production.json
            readOnly: true
      volumes:
        - name: appsettings-cfg
          configMap:
            name: api-app-settings

---

# Service
# Let's create a ClisterIP (intenal Loadbalancer) over our pods
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: scratchpad
  labels:
    app: api
spec:
  type: ClusterIP #(this is the default so not reallly needed)
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 5050
      targetPort: 5000

---

# Ingess
# Let's create an entypoint for external requests to our cluste
# NOTE:: Must install NGINX Ingress controller first @ https://kubernetes.github.io/ingress-nginx/deploy/#quick-start

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  namespace: scratchpad
  labels:
    app: api
spec:
  ingressClassName: nginx
  rules:
  - host: delagetto-scratchpad.com
    http: 
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: api-service
              port:
                number: 5050

  #- host:  # An optional host. In this example, no host is specified, 
                      # so the rule applies to all inbound HTTP traffic through the IP address specified. 
                      # If a host is provided (for example, foo.bar.com), the rules apply to that host.
        


